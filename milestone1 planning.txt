final project planning
ME449



##############

Milestone 1

############

Outline:

You will write a simulator for the kinematics of the youBot. The main function in the simulator, let's call it NextState, is specified by the following inputs and outputs (you may modify these inputs and outputs if you wish):

Input:

A 12-vector representing the current configuration
	of the robot (3 variables for the chassis configuration, 
	5 variables for the arm configuration, and 4 variables 
	for the wheel angles).
A 9-vector of controls indicating the wheel speeds u 
	(4 variables) and the arm joint speeds \dot{\theta} (5 variables).
A timestep Δt.
A positive real value indicating the maximum angular 
	speed of the arm joints and the wheels. For example, 
	if this value is 12.3, the angular speed of the wheels 
	and arm joints is limited to the range [-12.3 radians/s,
	 12.3 radians/s]. Any speed in the 9-vector of controls
	 that is outside this range will be set to the nearest 
	 boundary of the range. If you don't want speed limits,
	 just use a very large number. If you prefer, your 
	 function can accept separate speed limits for the 
	 wheels and arm joints.
Output: A 12-vector representing the configuration of the 
	robot time Δt later.

The function NextState is based on a simple first-order
	Euler step, i.e.,

	new arm joint angles = (old arm joint angles) + (joint speeds) * Δt
	new wheel angles = (old wheel angles) + (wheel speeds) * Δt
	new chassis configuration is obtained from odometry, 
		as described in Chapter 13.4


##################################

To-Do:
- use pseudoinverse to calculate [u thetadot] = Jt(theta) V(t)
	----> assume no feedback control for now
- calculate new chassis configuration using odometry
	- given Vb6 calculated earlier, integrate the twist
		Tbk-->bk+1 = exp(Vb6)
	- express position in the world frame:
		- Tsb,k+1 = Tsb,k * Tbk-->bk+1

Things to fix:
- pass in Tb0 from the geometry file


Done:
- write NextState() outline
- determine Tsb(q) from omnidirectional robot control
- determine Jacobian of arm from Blist; JacobianBody()
	at given joint angles
- Find matrix F that relates Vb = F*delta(theta), or 
	relates motion of the wheels to 
	
- Take F from Mobile Robots section and relate to:
	Vb = F*u
	Vb6 = [0 0 F 0 ] *u
	Ve = [AdTeb(theta)]*Vb6
	Ve = [Ad(  T0e-1(theta) * Tb0^-1)]* F6*u
	Jarm = [Ad(  T0e-1(theta) * Tb0^-1)]* F6
	
- calculate Je(theta) = [Jbase(theta) Jarm(theta)]